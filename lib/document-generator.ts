import ExcelJS from 'exceljs';
import { Document, Page, renderToBuffer } from '@react-pdf/renderer';
import { Html } from 'react-pdf-html';
import React from 'react';

export interface DocumentGenerationOptions {
  title?: string;
  author?: string;
  subject?: string;
  keywords?: string[];
  format: "pdf" | "excel" | "html" | "docx";
  content: string;
  data?: any[];
  template?: "report" | "table" | "presentation" | "custom";
}

export class DocumentGenerator {
  async generatePDF(options: DocumentGenerationOptions): Promise<Buffer> {
    const {
      title = "Generated Document",
      author = "Document Assistant",
      content,
    } = options;

    try {
      // Clean the content to avoid double HTML wrapping
      let cleanContent = content;
      if (content.includes("<html>")) {
        // Extract content from body if it's already wrapped in HTML
        const bodyMatch = content.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
        if (bodyMatch) {
          cleanContent = bodyMatch[1];
        }
      }

      // Create minimal HTML structure for react-pdf-html without custom fonts
      const htmlContent = `
        <html>
          <body>
            <h1>${title}</h1>
            ${cleanContent}
          </body>
        </html>
      `;

      // Create PDF document using react-pdf-html
      const MyDocument = React.createElement(
        Document,
        {
          title,
          author,
          creator: "Document Assistant",
        },
        React.createElement(
          Page,
          {
            size: "A4",
            style: {
              padding: 30,
            },
          },
          React.createElement(Html, null, htmlContent)
        )
      );

      const pdfBuffer = await renderToBuffer(MyDocument);
      return pdfBuffer;
    } catch (error) {
      console.error("PDF generation error:", error);
      throw new Error(
        `Failed to generate PDF: ${
          error instanceof Error ? error.message : "Unknown error"
        }`
      );
    }
  }

  async generateExcel(options: DocumentGenerationOptions): Promise<Buffer> {
    const { title = "Generated Document", data = [], content } = options;

    const workbook = new ExcelJS.Workbook();
    workbook.creator = "Document Assistant";
    workbook.created = new Date();

    const worksheet = workbook.addWorksheet(title);

    if (data.length > 0) {
      // If data is provided, create a table
      const headers = Object.keys(data[0]);
      worksheet.addRow(headers);

      data.forEach((row) => {
        const values = headers.map((header) => row[header]);
        worksheet.addRow(values);
      });

      // Style the header row
      const headerRow = worksheet.getRow(1);
      headerRow.font = { bold: true };
      headerRow.fill = {
        type: "pattern",
        pattern: "solid",
        fgColor: { argb: "FFE0E0E0" },
      };
    } else {
      // If no data, add content as text
      const lines = content.split("\n");
      lines.forEach((line, index) => {
        worksheet.addRow([line]);
      });
    }

    // Auto-fit columns
    worksheet.columns.forEach((column) => {
      column.width = 15;
    });

    const buffer = await workbook.xlsx.writeBuffer();
    return Buffer.from(buffer);
  }

  async generateHTML(options: DocumentGenerationOptions): Promise<string> {
    const {
      title = "Generated Document",
      content,
      template = "report",
    } = options;

    const templates = {
      report: `
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${title}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
            h1 { color: #333; border-bottom: 2px solid #333; padding-bottom: 10px; }
            .content { margin-top: 20px; }
            .footer { margin-top: 40px; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <h1>${title}</h1>
          <div class="content">
            ${content.replace(/\n/g, "<br>")}
          </div>
          <div class="footer">
            Generated by Document Assistant on ${new Date().toLocaleDateString()}
          </div>
        </body>
        </html>
      `,
      table: `
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${title}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            table { border-collapse: collapse; width: 100%; margin-top: 20px; }
            th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
            th { background-color: #f2f2f2; font-weight: bold; }
            tr:nth-child(even) { background-color: #f9f9f9; }
          </style>
        </head>
        <body>
          <h1>${title}</h1>
          <div>${content.replace(/\n/g, "<br>")}</div>
        </body>
        </html>
      `,
      presentation: `
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${title}</title>
          <style>
            body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
            .slide { background: rgba(255,255,255,0.1); padding: 40px; border-radius: 10px; backdrop-filter: blur(10px); }
            h1 { font-size: 2.5em; margin-bottom: 30px; text-align: center; }
            .content { font-size: 1.2em; line-height: 1.8; }
          </style>
        </head>
        <body>
          <div class="slide">
            <h1>${title}</h1>
            <div class="content">
              ${content.replace(/\n/g, "<br>")}
            </div>
          </div>
        </body>
        </html>
      `,
      custom: `
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>${title}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
            h1 { color: #2c3e50; }
          </style>
        </head>
        <body>
          <h1>${title}</h1>
          <div>${content.replace(/\n/g, "<br>")}</div>
        </body>
        </html>
      `,
    };

    return templates[template] || templates.custom;
  }

  async generateAdvancedPDF(
    options: DocumentGenerationOptions
  ): Promise<Buffer> {
    // Use the same HTML to PDF conversion as generatePDF
    return this.generatePDF(options);
  }

  async generate(options: DocumentGenerationOptions): Promise<Buffer | string> {
    switch (options.format) {
      case "pdf":
        return options.template === "custom" ||
          options.template === "presentation"
          ? await this.generateAdvancedPDF(options)
          : await this.generatePDF(options);
      case "excel":
        return await this.generateExcel(options);
      case "html":
        return await this.generateHTML(options);
      default:
        throw new Error(`Unsupported format: ${options.format}`);
    }
  }
}

export const documentGenerator = new DocumentGenerator();
