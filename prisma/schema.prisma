// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // "user" or "admin"
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  folders       Folder[]
  items         Item[]    // New unified items relation
  chatSessions  ChatSession[]
  templates     Template[]
  templateGenerations TemplateGeneration[]
  userSettings  UserSettings?
  billing       Billing?
  userCredit    UserCredit?
  creditTransactions CreditTransaction[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id          String   @id @default(cuid())
  name        String
  type        String
  size        Int
  content     String?
  url         String?  // S3 URL
  key         String?  // S3 key
  bucket      String?  // S3 bucket
  summary     String?
  keyPoints   String?
  sentiment   String?
  topics      String?
  uploadDate  DateTime @default(now())
  folderId    String?  // Optional folder association
  folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  milvusCollectionId String? // Reference to Milvus collection for this document's chunks
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Folder {
  id          String     @id @default(cuid())
  name        String
  color       String?    @default("#3B82F6") // Default blue color
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents   Document[]
  parentId    String?    // For nested folders
  parent      Folder?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Folder[]   @relation("FolderHierarchy")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model ChatSession {
  id          String   @id @default(cuid())
  title       String
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    ChatMessage[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ChatMessage {
  id            String      @id @default(cuid())
  content       String
  role          String      // 'user' or 'assistant'
  sessionId     String
  session       ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  referencedDocs String[]   // Array of document IDs
  milvusId      String?     // Milvus vector ID for semantic search
  embedding     ChatMessageEmbedding?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model ChatMessageEmbedding {
  id        String      @id @default(cuid())
  messageId String      @unique
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  embedding Float[]     // Vector embedding
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model UserSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme                 String  @default("light")
  language              String  @default("en")
  notificationsEnabled  Boolean @default(true)
  autoSaveEnabled       Boolean @default(true)
  defaultModel          String  @default("llama-3.3-70b-versatile")
  maxTokens             Int     @default(1024)
  temperature           Float   @default(0.7)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Billing {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan              String   @default("free") // free, pro, enterprise
  tokensUsed        Int      @default(0)
  tokensLimit       Int      @default(10000)
  documentsUploaded Int      @default(0)
  documentsLimit    Int      @default(10)
  billingCycle      String   @default("monthly")
  lastBillingDate   DateTime?
  nextBillingDate   DateTime?
  stripeCustomerId  String?
  stripeSubscriptionId String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// Credit system models
model UserCredit {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance       Int      @default(0) // Current credit balance
  totalEarned   Int      @default(0) // Total credits earned (from subscriptions, top-ups)
  totalSpent    Int      @default(0) // Total credits spent
  dailyLimit    Int      @default(500) // Daily credit limit based on plan
  dailyUsed     Int      @default(0) // Credits used today
  lastResetDate DateTime @default(now()) // Last daily reset date
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // 'earn', 'spend', 'topup', 'subscription', 'daily_reset'
  amount      Int      // Positive for earning, negative for spending
  description String   // Description of the transaction
  reference   String?  // Reference ID (e.g., chat message ID, payment ID)
  metadata    Json?    // Additional metadata
  createdAt   DateTime @default(now())
}

model CreditPackage {
  id          String   @id @default(cuid())
  name        String   // e.g., "500 Credits", "2000 Credits"
  description String?
  credits     Int      // Number of credits in the package
  price       Float    // Price in USD
  currency    String   @default("USD")
  stripePriceId String? // Stripe price ID for one-time purchases
  isActive    Boolean  @default(true)
  isPopular   Boolean  @default(false) // Whether this package is marked as popular
  bonusCredits Int?    @default(0) // Additional bonus credits
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SubscriptionPlan {
  id              String   @id @default(cuid())
  name            String   // "Free", "Pro", "Enterprise"
  description     String?
  dailyCredits    Int      // Daily credit allowance
  monthlyCredits  Int      // Monthly credit allowance (for display)
  price           Float    @default(0) // Monthly price in USD
  currency        String   @default("USD")
  stripePriceId   String?  // Stripe price ID for subscriptions
  features        Json?    // JSON array of features
  isActive        Boolean  @default(true)
  sortOrder       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Template {
  id            String   @id @default(cuid())
  name          String
  description   String?
  type          String   // pptx, xlsx, docx, etc.
  category      String?  // business, education, personal, etc.
  url           String?  // S3 URL for original template file
  key           String?  // S3 key for original template file
  bucket        String?  // S3 bucket
  size          Int?     // File size in bytes
  thumbnail     String?  // Thumbnail image URL
  isPublic      Boolean  @default(true) // Whether template is publicly available
  downloadCount Int      @default(0)
  templateFields Json?   // JSON structure defining form fields and placeholders
  previewUrl    String?  // URL for template preview/sample
  instructions  String?  // Instructions for using the template
  aiPrompt      String?  // AI prompt template for document generation
  userId        String?  // Optional: creator of the template
  user          User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  generatedDocs TemplateGeneration[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model TemplateGeneration {
  id          String   @id @default(cuid())
  templateId  String
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  formData    Json     // The form data submitted by user
  documentUrl String?  // Generated document URL
  documentKey String?  // Generated document S3 key
  status      String   @default("pending") // pending, processing, completed, failed
  aiEnhanced  Boolean  @default(false) // Whether AI was used to enhance the generation
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Unified Item model that combines folders and documents
model Item {
  id          String   @id @default(cuid())
  name        String
  type        String   // "folder" or "document"
  
  // Common fields
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentId    String?  // For hierarchy (both folders and documents can be in folders)
  parent      Item?    @relation("ItemHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Item[]   @relation("ItemHierarchy")
  
  // Document-specific fields (nullable for folders)
  fileType    String?  // MIME type for documents
  size        Int?     // File size in bytes
  content     String?  // Document content
  url         String?  // S3 URL
  key         String?  // S3 key
  bucket      String?  // S3 bucket
  summary     String?  // AI-generated summary
  keyPoints   String?  // AI-generated key points
  sentiment   String?  // AI sentiment analysis
  topics      String?  // AI-generated topics
  milvusCollectionId String? // Reference to Milvus collection
  
  // Folder-specific fields (nullable for documents)
  color       String?  @default("#3B82F6") // Folder color
  
  // Common metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId, parentId])
  @@index([type])
}