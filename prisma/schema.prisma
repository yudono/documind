generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  role               String              @default("user")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accounts           Account[]
  billing            Billing?
  chatSessions       ChatSession[]
  consultant         Consultant?
  clientBookings     ConsultantBooking[] @relation("ClientBookings")
  clientReviews      ConsultantReview[]  @relation("ClientReviews")
  creditTransactions CreditTransaction[]
  items              Item[]
  sessions           Session[]
  userCredit         UserCredit?
  userSettings       UserSettings?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatSession {
  id         String        @id @default(cuid())
  title      String
  userId     String
  documentId String?
  type       String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  messages   ChatMessage[]
  document   Item?         @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ChatMessage {
  id             String      @id @default(cuid())
  content        String
  role           String
  sessionId      String
  referencedDocs Json?
  milvusId       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  session        ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  theme                String   @default("light")
  language             String   @default("en")
  notificationsEnabled Boolean  @default(true)
  autoSaveEnabled      Boolean  @default(true)
  defaultModel         String   @default("llama-3.3-70b-versatile")
  maxTokens            Int      @default(1024)
  temperature          Float    @default(0.7)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Billing {
  id                   String    @id @default(cuid())
  userId               String    @unique
  plan                 String    @default("free")
  tokensUsed           Int       @default(0)
  tokensLimit          Int       @default(10000)
  documentsUploaded    Int       @default(0)
  documentsLimit       Int       @default(10)
  billingCycle         String    @default("monthly")
  lastBillingDate      DateTime?
  nextBillingDate      DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserCredit {
  id            String   @id @default(cuid())
  userId        String   @unique
  totalEarned   Int      @default(0)
  totalSpent    Int      @default(0)
  dailyLimit    Int      @default(500)
  dailyUsed     Int      @default(0)
  lastResetDate DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  type        String
  amount      Int
  description String
  reference   String?
  metadata    Json?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CreditPackage {
  id            String   @id @default(cuid())
  name          String
  description   String?
  credits       Int
  price         Float
  currency      String   @default("USD")
  stripePriceId String?
  isActive      Boolean  @default(true)
  bonusCredits  Int?     @default(0)
  sortOrder     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SubscriptionPlan {
  id             String   @id @default(cuid())
  name           String
  description    String?
  dailyCredits   Int
  monthlyCredits Int
  price          Float    @default(0)
  currency       String   @default("USD")
  stripePriceId  String?
  features       Json?
  isActive       Boolean  @default(true)
  sortOrder      Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Template {
  id        String   @id @default(cuid())
  name      String
  thumbnail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  html      String
}

model Item {
  id                 String        @id @default(cuid())
  name               String
  type               String
  userId             String
  parentId           String?
  fileType           String?
  size               Int?
  content            String?
  url                String?
  key                String?
  bucket             String?
  summary            String?
  keyPoints          String?
  sentiment          String?
  topics             String?
  milvusCollectionId String?
  color              String?       @default("#3B82F6")
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  deleteAt           DateTime?
  chatSessions       ChatSession[]
  parent             Item?         @relation("ItemHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children           Item[]        @relation("ItemHierarchy")
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, parentId])
  @@index([type])
}

model ConsultantCategory {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  icon        String?
  color       String?      @default("#3B82F6")
  isActive    Boolean      @default(true)
  sortOrder   Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  consultants Consultant[]
}

model Consultant {
  id                String              @id @default(cuid())
  userId            String              @unique
  fullName          String
  title             String
  bio               String?
  profileImage      String?
  experience        Int                 @default(0)
  education         String?
  certifications    Json?
  languages         Json?
  categoryId        String
  specializations   Json?
  licenseNumber     String?
  hourlyRate        Float
  currency          String              @default("IDR")
  availability      Json?
  responseTime      String?
  consultationTypes Json?
  isVerified        Boolean             @default(false)
  verificationDate  DateTime?
  verificationDocs  Json?
  status            String              @default("pending")
  totalBookings     Int                 @default(0)
  completedBookings Int                 @default(0)
  averageRating     Float               @default(0)
  totalReviews      Int                 @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  category          ConsultantCategory  @relation(fields: [categoryId], references: [id])
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings          ConsultantBooking[]
  reviews           ConsultantReview[]
  availableSlots    ConsultantSlot[]

  @@index([categoryId])
  @@index([isVerified, status])
  @@index([averageRating])
}

model ConsultantSlot {
  id           String     @id @default(cuid())
  consultantId String
  dayOfWeek    Int
  startTime    String
  endTime      String
  isAvailable  Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  consultant   Consultant @relation(fields: [consultantId], references: [id], onDelete: Cascade)

  @@index([consultantId, dayOfWeek])
}

model ConsultantBooking {
  id                 String             @id @default(cuid())
  clientId           String
  consultantId       String
  sessionDate        DateTime
  sessionDuration    Int                @default(60)
  sessionType        String
  sessionUrl         String?
  title              String
  description        String?
  documents          Json?
  totalAmount        Float
  currency           String             @default("IDR")
  paymentStatus      String             @default("pending")
  paymentId          String?
  status             String             @default("pending")
  cancellationReason String?
  meetingNotes       String?
  followUpRequired   Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  client             User               @relation("ClientBookings", fields: [clientId], references: [id], onDelete: Cascade)
  consultant         Consultant         @relation(fields: [consultantId], references: [id], onDelete: Cascade)
  payment            ConsultantPayment?
  review             ConsultantReview?

  @@index([clientId])
  @@index([consultantId])
  @@index([sessionDate])
  @@index([status])
}

model ConsultantReview {
  id                    String            @id @default(cuid())
  bookingId             String            @unique
  clientId              String
  consultantId          String
  rating                Int
  comment               String?
  professionalismRating Int?
  communicationRating   Int?
  expertiseRating       Int?
  timelinessRating      Int?
  isPublic              Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  booking               ConsultantBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  client                User              @relation("ClientReviews", fields: [clientId], references: [id], onDelete: Cascade)
  consultant            Consultant        @relation(fields: [consultantId], references: [id], onDelete: Cascade)

  @@index([consultantId])
  @@index([rating])
}

model ConsultantPayment {
  id              String            @id @default(cuid())
  bookingId       String            @unique
  amount          Float
  currency        String            @default("IDR")
  paymentMethod   String
  merchantCode    String
  merchantName    String
  transactionId   String?
  paymentUrl      String?
  status          String            @default("pending")
  paidAt          DateTime?
  failureReason   String?
  gatewayResponse Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  booking         ConsultantBooking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([transactionId])
}
